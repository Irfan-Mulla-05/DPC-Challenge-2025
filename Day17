/*
Day 17 of 30 ðŸ—“

Problem : Prime Factorization of a Number
Given a positive integer N, your task is to find its prime factorization. Return a list of prime numbers that multiply together to give N. If N is prime, the output should be a list containing only N.
Prime factorization is the process of breaking down a number into the set of prime numbers that, when multiplied together, result in the original number. For example, if N = 18, its prime factors are [2, 3, 3] because 2Ã—3Ã—3=18.

Input :
* A single integer N, where 2â‰¤Nâ‰¤109
* N = 18

Output :
A list of prime numbers representing the prime factorization of N.
Output: [2, 3, 3]

*/
import java.util.*;

public class Day17 {
    public static List<Integer> primeFactors(int n) {
        List<Integer> result = new ArrayList<>();
        for (int i = 2; i * i <= n; i++) {
            while (n % i == 0) {
                result.add(i);
                n /= i;
            }
        }
        if (n > 1) result.add(n);
        return result;
    }

    public static void main(String[] args) {
        int n = 18;
        System.out.println(primeFactors(n));
    }
}
