/*
Day 25 of 30 ðŸ—“

Problem : Check if a Binary Tree is a Binary Search Tree (BST)
You are given the root of a binary tree. Your task is to determine whether the tree is a valid Binary Search Tree (BST)

Input :
* A binary tree represented by its root node.
* Input: root = [2, 1, 3]

Output :
Return true if the binary tree is a valid BST, otherwise return false.
Output: true

*/
class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int x) { val = x; }
}

public class Day25 {
    public static boolean isValidBST(TreeNode root) {
        return helper(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }

    private static boolean helper(TreeNode node, long min, long max) {
        if (node == null) return true;
        if (node.val <= min || node.val >= max) return false;
        return helper(node.left, min, node.val) && helper(node.right, node.val, max);
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(2);
        root.left = new TreeNode(1);
        root.right = new TreeNode(3);
        System.out.println(isValidBST(root));
    }
}
