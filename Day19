/*
Day 19 of 30 ðŸ—“

Problem : Evaluate a Postfix Expression
Given a postfix expression (also known as Reverse Polish Notation), your task is to evaluate the expression and return the result. The expression can contain integers and the four basic arithmetic operators +, -, *, and /. Assume that the input is always valid and the division operator performs integer division, truncating towards zero.

Input :
- A string representing a postfix expression where operands and operators are separated by spaces.
- The string contains only integers (both positive and negative) and the operators +, -, *, and /.
- Input: "2 1 + 3 *"

Output :
An integer representing the result of evaluating the postfix expression.
Output: 9

*/
import java.util.*;

public class Day19 {
    public static int evaluatePostfix(String expr) {
        Stack<Integer> stack = new Stack<>();
        String[] tokens = expr.split(" ");
        for (String token : tokens) {
            if (token.equals("+") || token.equals("-") || token.equals("*") || token.equals("/")) {
                int b = stack.pop();
                int a = stack.pop();
                switch (token) {
                    case "+": stack.push(a + b); break;
                    case "-": stack.push(a - b); break;
                    case "*": stack.push(a * b); break;
                    case "/": stack.push(a / b); break;
                }
            } else {
                stack.push(Integer.parseInt(token));
            }
        }
        return stack.pop();
    }

    public static void main(String[] args) {
        String expr = "2 1 + 3 *";
        System.out.println(evaluatePostfix(expr));
    }
}
