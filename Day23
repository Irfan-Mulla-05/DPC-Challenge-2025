/*
Day 23 of 30 ðŸ—“

Problem : Sliding Window Maximum
You are given an array of integers arr and a positive integer k. Your task is to find the maximum element in each sliding window of size k. The window slides from left to right, one element at a time, and you need to return the maximum element for each of these windows.

Input :
* An integer array arr of size n, where 1â‰¤nâ‰¤105
* An integer k, where 1â‰¤kâ‰¤n
* Input: arr = [1, 3, -1, -3, 5, 3, 6, 7], k = 3

Output :
An array of size nâˆ’k+1 containing the maximum element from each sliding window.
Output: [3, 3, 5, 5, 6, 7]
*/
import java.util.*;

public class Day23 {
    public static int[] slidingWindowMaximum(int[] arr, int k) {
        int n = arr.length;
        int[] result = new int[n - k + 1];
        Deque<Integer> dq = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            while (!dq.isEmpty() && dq.peekFirst() <= i - k) dq.pollFirst();
            while (!dq.isEmpty() && arr[dq.peekLast()] < arr[i]) dq.pollLast();
            dq.offerLast(i);
            if (i >= k - 1) result[i - k + 1] = arr[dq.peekFirst()];
        }
        return result;
    }

    public static void main(String[] args) {
        int[] arr = {1, 3, -1, -3, 5, 3, 6, 7};
        int k = 3;
        System.out.println(Arrays.toString(slidingWindowMaximum(arr, k)));
    }
}
