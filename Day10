/*
Day 10 of 30 ðŸ—“

Problem : Group Anagrams
You are given an array of strings strs[]. Your task is to group all the strings that are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
The goal is to return the grouped anagrams as a list of lists, where each sublist contains words that are anagrams of each other.

Input :
An array of strings strs[] consisting of lowercase English letters.
Input: strs[] = ["eat", "tea", "tan", "ate", "nat", "bat"]

Output :
A list of lists, where each sublist contains strings that are anagrams of each other. The order of the output groups does not matter.
Output: [["eat", "tea", "ate"], ["tan", "nat"], ["bat"]]
*/
import java.util.*;

public class Day10 {
    public static List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> map = new HashMap<>();
        for (String s : strs) {
            char[] ch = s.toCharArray();
            Arrays.sort(ch);
            String key = new String(ch);
            map.putIfAbsent(key, new ArrayList<>());
            map.get(key).add(s);
        }
        return new ArrayList<>(map.values());
    }

    public static void main(String[] args) {
        String[] strs = {"eat", "tea", "tan", "ate", "nat", "bat"};
        System.out.println(groupAnagrams(strs));
    }
}
